@startuml
class api.graphGen {
+ MyGraph generate_connected_graph(int)
+ MyGraph generate_graph(int,int)
+ MyGraph generate_large_graph(int,int)
}
interface api.GeoLocation {
+ double x()
+ double y()
+ double z()
+ double distance(GeoLocation)
}
class Ex2 {
+ {static} DirectedWeightedGraph getGrapg(String)
+ {static} DirectedWeightedGraphAlgorithms getGrapgAlgo(String)
+ {static} void runGUI(String)
+ {static} void main(String[])
}
class api.ParseToGraph {
- HashMap<Integer,Node> Nodes
- HashMap<String,Edge> Edges
- ParserFromJson p
+ int size
+ HashMap<Integer,Node> makeNodes(HashMap<String,String>[])
+ HashMap<String,Edge> makeEdges(HashMap<String,String>[],HashMap<Integer,Node>)
+ HashMap<Integer,Node> getNodes()
+ HashMap<String,Edge> getEdges()
}
class api.ParserFromJson {
- HashMap<String,String>[] Edges
- HashMap<String,String>[] Nodes
+ HashMap<String,String>[] getEdges()
+ HashMap<String,String>[] getNodes()
}
class api.Location {
- double x
- double y
- double z
+ double x()
+ double y()
+ double z()
+ double distance(GeoLocation)
+ String toString()
}
interface api.DirectedWeightedGraph {
+ NodeData getNode(int)
+ EdgeData getEdge(int,int)
+ void addNode(NodeData)
+ void connect(int,int,double)
+ Iterator<NodeData> nodeIter()
+ Iterator<EdgeData> edgeIter()
+ Iterator<EdgeData> edgeIter(int)
+ NodeData removeNode(int)
+ EdgeData removeEdge(int,int)
+ int nodeSize()
+ int edgeSize()
+ int getMC()
}
class api.MyGraphAlgo {
- DirectedWeightedGraph graph
- int connected
- int mc
+ void init(DirectedWeightedGraph)
+ DirectedWeightedGraph getGraph()
+ DirectedWeightedGraph copy()
+ boolean isConnected()
- void DFS(Queue<Integer>,HashSet<Integer>,DirectedWeightedGraph)
- void visit(Queue,int,HashSet<Integer>,DirectedWeightedGraph)
- DirectedWeightedGraph reverse()
- boolean isStronglyConnected()
+ double shortestPathDist(int,int)
+ List<NodeData> shortestPath(int,int)
+ NodeData center()
+ double djikstra(int)
+ double djikstra(int,int)
+ HashMap<Integer,father> djikstra_path(int,int)
+ List<NodeData> findRoute(List<NodeData>)
+ List<NodeData> tsp(List<NodeData>)
+ void swap(int,int,List<NodeData>)
+ List<NodeData> copy(List<NodeData>)
+ boolean save(String)
+ boolean load(String)
}
class api.MyGraphAlgo.trio {
~ int from
~ int to
~ double weight
}
class api.MyGraphAlgo.father {
~ int prev
~ double weight
}
class GUI.MyPanel {
- MyGraphAlgo graph
- NodeData center
- boolean isCenterActivated
- List<NodeData> pathByNodes
- List<NodeData> pathByNodesTSP
- int src
+ double minX
+ double minY
+ double maxX
+ double maxY
+ void paint(Graphics)
+ void setMin()
- void drawArrowLine(Graphics,int,int,int,int,int,int)
- double middle(double,double)
+ MyGraphAlgo getGraph()
+ void setCenterActivated(boolean)
+ void setPath(List<NodeData>)
+ int getSrc()
+ void setSrc(int)
+ int getDest()
+ void setPathByNodesTSP(List<NodeData>)
+ void setDest(int)
+ void setPathActivated(boolean)
+ void setCenter(NodeData)
+ void setPathByNodesTSPActivated(boolean)
+ NodeData getCenter()
+ void checkMin(NodeData)
}
interface api.NodeData {
+ int getKey()
+ GeoLocation getLocation()
+ void setLocation(GeoLocation)
+ double getWeight()
+ void setWeight(double)
+ String getInfo()
+ void setInfo(String)
+ int getTag()
+ void setTag(int)
}
interface api.EdgeData {
+ int getSrc()
+ int getDest()
+ double getWeight()
+ String getInfo()
+ void setInfo(String)
+ int getTag()
+ void setTag(int)
}
class api.MyGraph {
- HashMap<Integer,Node> nodes
- int size
- int MC
+ NodeData getNode(int)
+ EdgeData getEdge(int,int)
+ void connect(int,int,double)
+ Iterator<NodeData> nodeIter()
+ Iterator<EdgeData> edgeIter()
+ Iterator<EdgeData> edgeIter(int)
+ NodeData removeNode(int)
- void removeRelatedEdges(Node)
+ EdgeData removeEdge(int,int)
+ int nodeSize()
+ int edgeSize()
+ int getMC()
+ void addNode(NodeData)
+ HashMap<Integer,Node> getNodes()
+ String toStringEdges()
+ String toStringNodes()
+ String toString()
}
class GUI.MyGraph_GUI {
- MyFrame frame
- MyPanel panel
- DirectedWeightedGraph graph
}
class GUI.MyFrame {
- MyPanel mainPanel
- JPanel buttonsPanel
- JPanel outputPanel
- JScrollPane terminal
- JTextArea JTA
- DirectedWeightedGraph graph
- DirectedWeightedGraph graphCopy
- MyGraphAlgo algo
- NodeData center
- String outputText
- int width
~ JMenuBar menuBar
~ JMenu fileMenu
~ JMenu editMenu
~ JMenu algorithmsMenu
~ JMenu viewMenu
~ JMenu helpMenu
~ JMenuItem loadItem
~ JMenuItem saveItem
~ JMenuItem clearItem
~ JMenuItem resetItem
~ JMenuItem exitItem
~ JMenuItem removeNodeItem
~ JMenuItem removeEdgeItem
~ JMenuItem addNodeItem
~ JMenuItem addEdgeItem
~ JMenuItem isConnectedItem
~ JMenuItem shortestPath
~ JMenuItem centerItem
~ JMenuItem TSPItem
~ JMenuItem hideButtonsItem
~ JMenuItem showButtonsItem
~ JMenuItem fullScreenItem
~ JMenuItem defaultItem
~ JMenuItem customScaleItem
~ JMenuItem shortcutsItem
~ JButton SP
~ JButton IC
~ JButton TSP
~ JButton CE
~ JButton RN
~ JButton RE
~ JButton AN
~ JButton AE
~ JButton CLR
~ JButton RESET
~ JButton LOAD
~ JButton SAVE
+ void initGUI()
- void createMenus()
- void createKeyShortCuts()
- void updateTerminal()
- void addButtonsAndText()
+ void actionPerformed(ActionEvent)
- void updateMouseListener(JTextField)
+ void setOutputText(String)
- int chooseInputTSPState()
+ int getWidth()
+ int getHeight()
+ void mouseClicked(MouseEvent)
+ void mousePressed(MouseEvent)
+ void mouseReleased(MouseEvent)
+ void mouseEntered(MouseEvent)
+ void mouseExited(MouseEvent)
}
class api.Edge {
- int src
- int dest
- double weight
- String info
~ int tag
+ Edge copy()
+ int getSrc()
+ int getDest()
+ double getWeight()
+ String getInfo()
+ void setInfo(String)
+ int getTag()
+ void setTag(int)
+ String toString()
}
interface api.DirectedWeightedGraphAlgorithms {
+ void init(DirectedWeightedGraph)
+ DirectedWeightedGraph getGraph()
+ DirectedWeightedGraph copy()
+ boolean isConnected()
+ double shortestPathDist(int,int)
+ List<NodeData> shortestPath(int,int)
+ NodeData center()
~ List<NodeData> tsp(List<NodeData>)
+ boolean save(String)
+ boolean load(String)
}
class api.Node {
- HashMap<Integer,Edge> Edges
- HashSet<Integer> inEdges
- int id
- GeoLocation location
- double weight
- String info
- int tag
+ void addInEdge(int)
+ HashSet<Integer> inEdges()
+ Node copy()
+ int getKey()
+ void setId(int)
+ GeoLocation getLocation()
+ double getWeight()
+ void setWeight(double)
+ String getInfo()
+ void setInfo(String)
+ int getTag()
+ void setTag(int)
+ void addEdge(Edge)
+ EdgeData removeEdge(int)
+ void setLocation(GeoLocation)
+ HashMap<Integer,Edge> getEdges()
+ String toString()
}


api.GeoLocation <|.. api.Location
api.DirectedWeightedGraphAlgorithms <|.. api.MyGraphAlgo
api.MyGraphAlgo +.. api.MyGraphAlgo.trio
api.MyGraphAlgo +.. api.MyGraphAlgo.father
GUI.JPanel <|-- GUI.MyPanel
api.DirectedWeightedGraph <|.. api.MyGraph
GUI.ActionListener <|.. GUI.MyFrame
GUI.MouseListener <|.. GUI.MyFrame
GUI.JFrame <|-- GUI.MyFrame
api.EdgeData <|.. api.Edge
api.NodeData <|.. api.Node
@enduml